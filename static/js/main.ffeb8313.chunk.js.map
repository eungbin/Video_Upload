{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/MovieForm.js","components/MovieFormList.js","components/MovieList.js","components/TestForm.js","components/ModalPortal.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","form","children","className","Form","testChange","testClick","vaule","onChange","type","name","e","onClick","placeholder","value","useStyles","makeStyles","theme","root","margin","spacing","MovieForm","src","text","onRemove","viewVideo","classes","Button","variant","color","MovieList","i","movies","Box","display","flexDirection","flexWrap","p","m","css","maxWidth","map","index","video_link","video_title","key","TestForm","onClose","url","controls","ModalPortal","el","document","getElementById","ReactDOM","createPortal","App","useState","file","fileState","setFileState","id","videos","setVideos","path","setFileName","state","windowState","setWindowState","title","nowVideo","setNowVideo","loading","loadingBar","setLoadingBar","inputValue","setInputValue","useEffect","fetch","then","res","json","data","refresh_state","number","newVideos","postFile","a","alert","formData","FormData","set","console","log","axios","post","response","file_path","length","deleteFile","target","files","var_string","pandan","replace","LinearProgress","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ffeb8313.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, children}) => {\r\n    return (\r\n        <main className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                업로드\r\n            </div>\r\n            <section className=\"form-wrapper\">\r\n                {form}\r\n            </section>\r\n            <section className=\"todos-wrapper\">\r\n                {children}\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default TodoListTemplate;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({testChange, testClick, vaule, onChange}) => {\r\n    return (\r\n        <div className=\"form\">\r\n            <input type=\"file\" name=\"file\" onChange={e => testChange(e)} />\r\n            <div className=\"create-button\" onClick={testClick} >\r\n                추가\r\n            </div>\r\n            <input type=\"text\" placeholder=\"제목을 입력해 주세요.\" name=\"text\" value={vaule} onChange={onChange} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n}));\r\n\r\nconst MovieForm = ({src, text, onRemove, viewVideo}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={(e) => viewVideo(src, text)}>\r\n                보기\r\n            </Button>\r\n\r\n            <Button variant=\"contained\" color=\"primary\">\r\n                수정\r\n            </Button>\r\n\r\n            <Button variant=\"contained\" color=\"primary\" onClick={(e) => onRemove(src)}>\r\n                삭제\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieForm;\r\n\r\n/*\r\n버튼 컴포넌트\r\n*/","import React from 'react';\r\nimport MovieForm from './MovieForm';\r\nimport ReactPlayer from 'react-player';\r\nimport './MovieFormList.css';\r\n\r\nconst MovieList = ({ i, text, onRemove, viewVideo }) => {\r\n\r\n    return (\r\n        <div className=\"test\">\r\n             <>\r\n                {/* <p>{text}</p>\r\n                <ReactPlayer\r\n                url={i}\r\n                controls\r\n                /> */}\r\n                <p>{i}</p>\r\n\r\n                <MovieForm src={i} text={text} onRemove={onRemove} viewVideo={viewVideo} />\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieList;\r\n\r\n/*\r\n영상과 버튼을 묶어주는 컴포넌트\r\n*/","import React from 'react';\r\nimport \"../../node_modules/video-react/dist/video-react.css\";\r\nimport Box from '@material-ui/core/Box';\r\nimport MovieFormList from './MovieFormList';\r\n\r\nconst MovieList = ({ movies, onRemove, viewVideo }) => {\r\n    // console.log(movies)\r\n    return (\r\n        <div>\r\n            <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\" p={1} m={1} css={{ maxWidth: 1500 }}>\r\n                {movies.map((i, index) =>\r\n                    <MovieFormList i={i.video_link} text={i.video_title} key={index} onRemove={onRemove} viewVideo={viewVideo} />\r\n                )}\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieList;","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport ReactPlayer from 'react-player';\r\nimport Button from '@material-ui/core/Button';\r\nimport './TestForm.css'\r\n\r\nconst TestForm = ({ i, text, onClose }) => {\r\n\r\n    return (\r\n        <div className=\"TestForm\">\r\n             <div className=\"content\">\r\n                <p>{text}</p>\r\n                <ReactPlayer\r\n                url={i}\r\n                controls\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={(e) => onClose()}>\r\n                    닫기\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TestForm;","import ReactDOM from 'react-dom';\r\n\r\nconst ModalPortal = ({ children }) => {\r\n  const el = document.getElementById('modal');\r\n  return ReactDOM.createPortal(children, el);\r\n};\r\n\r\nexport default ModalPortal;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport MovieList from './components/MovieList';\nimport \"../node_modules/video-react/dist/video-react.css\";\nimport TestForm from './components/TestForm';\nimport ModalPortal from './components/ModalPortal';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nfunction App() {\n  const [fileState, setFileState] = useState({\n    file: null\n  });     //선택한 파일\n\n  const [videos, setVideos] = useState([\n      { id: 0, video_link: '', video_title: ''}\n  ])      //영상들 정보\n\n  const [file, setFileName] = useState({\n    path: ''\n  });     //업로드한 파일\n\n  const [windowState, setWindowState] = useState({\n    state: false\n  })\n\n  const [nowVideo, setNowVideo] = useState({\n    path: '',\n    title: null\n  })\n\n  const [loadingBar, setLoadingBar] = useState({\n    loading: false\n  })\n\n  const [inputValue, setInputValue] = useState({\n    value: ''\n  })\n  \n  useEffect(()  => { // componentDidMount && componentDidUpdate 두 개의 리액트 라이프사이클 함수와 같은 기능\n    fetch('http://localhost:3001/api')\n      .then(res => res.json())\n      .then(data => {\n        refresh_state(data)\n      })\n  }, []);               //컴포넌트가 렌더링 될 때 마다 실행된다\n\n  const fileInput = (e) => {\n    console.log(e.target.files[0].name)\n    let var_string = ''\n    let pandan = false\n    videos.map((i) => {\n      var_string = i.video_link.replace(\"./video/\", \"\")\n      if(e.target.files[0].name === var_string) {\n        alert(\"동일한 파일이 이미 존재합니다.\")\n        pandan = true\n      }\n    })\n    if(pandan === false) {\n      console.log(\"pandan이 false라는데?\")\n      setFileState({\n        file: e.target.files[0]\n      })\n    } else {\n      console.log(\"pandan이 true라는데?\")\n      setFileState({\n        file: null\n      })\n    }\n  }\n\n  const refresh_state = (data) => {\n    let number = 0\n    const newVideos = data.map((i) => { number+=1; return { id: number, video_link: i.video_link, video_title: i.title }})\n    setVideos([...newVideos])\n  }\n\n  const postFile = async () => {\n    if(fileState.file === null) {\n      alert(\"파일을 선택해 주십시오.\")\n      return;\n    }\n    const formData = new FormData();\n    if(inputValue.value === '') {\n      inputValue.value = \"제목없음\"\n    }\n    formData.set('file', fileState.file)\n    formData.set('text', inputValue.value)\n    console.log(inputValue.value)\n\n    await setLoadingBar({\n      loading: true\n    })\n\n    const post_formData = await axios.post('http://localhost:3001/formData', formData)\n      .then(response => {\n        console.log(response.data)\n        if(response.data !== false) {\n          refresh_state(response.data)\n          const file_path = response.data[response.data.length-1].video_link\n          console.log(file_path)\n          setFileName({\n            path: file_path\n          })\n          alert('업로드 성공!')\n\n        } else {\n          alert('업로드 실패..')\n        }\n\n        console.log(videos)\n      })\n\n      await setLoadingBar({\n        loading: false\n      })\n  }\n\n  const deleteFile = async (file) => {\n    const delete_data = await axios.post('http://localhost:3001/delete', {file})\n      .then(res => {\n          refresh_state(res.data)\n      })\n  }\n\n  const openWindow = (src, title) => {\n    setWindowState({\n      state: true\n    })\n\n    setNowVideo({\n      path: src,\n      title: title\n    })\n  }\n\n  const closeWindow = () => {\n    setWindowState({\n      state: false\n    })\n\n    setNowVideo({\n      path: '',\n      title: ''\n    })\n  }\n\n  const handleChange = (e) => {\n    setInputValue({\n      value: e.target.value\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <TodoListTemplate form={(\n            <Form\n              testChange={fileInput}\n              testClick={postFile}\n              value={inputValue.value}\n              onChange={handleChange}\n            />\n          )}>\n            {loadingBar.loading === true ? <LinearProgress /> : null}\n            <MovieList movies={videos} onRemove={deleteFile} viewVideo={openWindow} />\n          </TodoListTemplate>\n          {windowState.state && (\n            <ModalPortal>\n              <TestForm i={nowVideo.path} text={nowVideo.title} onClose={closeWindow}/>\n            </ModalPortal>\n          )}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}